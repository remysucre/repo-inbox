define doctors_office

% These routines model a doctor's office. There is no global clock, no
% global communication, and tasks have no a priori knowledge of events.
% People fall sick and go to the doctor's office to be cured. They wait
% in order of arrival to see the next available doctor. If no one is
% waiting, the doctors wait in order for patients to arrive.
%
% Due to the deterministic nature of Sisal, we can not queue patients in
% their order of arrival as this is nondeterministic. Instead, we modify
% the problem description to queue patients in the order they fall sick.
% Note the nurse still doesn't know when the next patient will arrive.
% Furthermore, Sisal can not express the problem's mutually recursive
% streams. We overcome this by encapsulating the three subtasks in an
% iterative loop, forcing the subtasks to execute in step. We believe
% this mode of execution is more restrictive than intended by the problem
% description.

type queue  = array [integer];
type queue2 = array [array [integer] ];

global random    (seed: integer  returns real)
global next_seed (seed: integer  returns integer)

% Take as input a seed and a queue of healthy persons. If the queue is
% empty or no one has fallen sick (the if and elseif clauses),  return
% a ghost and the queue; else, choose a patient to become sick and re-
% turn his identity and the queue minus that patient.

function well_persons (seed: integer; patients: queue
               returns queue, queue)

  let
      x    := random(seed);
      size := array_size(patients);
      sick := floor(real(size) * x / 0.7) + 1
  in 
      if size = 0 | x = 0.7 then
         patients, array queue []
      else
         array_remh(patients[sick: patients[size]]),
         array [1: patients[sick]]
      end if
  end let

end function % well_persons

% Take as input a queue of patients and a queue of doctors. If the queue
% of patients or the queue of doctors is empty (the  if  clause), return
% the inputs and an empty queue of patient-doctor records;  else, remove
% the first patient and doctor from their respective queues,  and return
% the queue of sick persons with everyone moved up  one,  the  queue  of
% doctors with everyone moved up one,  and a queue of the patient-doctor
% identities.

function nurse(patients: queue; doctors: queue
       returns queue, queue2, queue)

  let
      n_patients := array_size(patients);
      n_doctors  := array_size(doctors)
  in
      if (n_patients = 0) | (n_doctors = 0) then
         patients, array queue2 [], doctors
      else
         array_setl(array_reml(patients), 1),
         array [1: array [1: patients[1], doctors[1]]],
         array_setl(array_reml(doctors), 1)
      end if
  end let

end function % nurse

% Take as input a seed and a queue of patient-doctor pairs.  If the queue
% is empty or no one has been cured,return an  empty  queue  of  patients,
% doctors, and the queue of patient-doctor pairs;  else, choose a patient-
% doctor pair,  and return the patient's identity,  the doctor's identity,
% the queue minus the chosen patient-doctor pair.

function examinations (seed: integer; in_exam: queue2
              returns queue2, queue, queue)

  let 
      x     := random(seed);
      size  := array_limh(in_exam);
      cured := floor(real(size) * x / 0.3) + 1
  in 
      if size = 0 | x >= 0.3 then
         in_exam, array queue [], array queue []
      else
         array_remh(in_exam[cured: in_exam[size]]),
         array [1: in_exam[cured, 1]],
         array [1: in_exam[cured, 2]]
      end if
  end let

end function % examinations

function doctors_office (list_of_patients, list_of_doctors: queue
                 returns stream[queue], stream[queue])

  for initial
    seed            := 0;
    still_well      := list_of_patients;
    patient_out     := array queue [];
    still_sick      := array queue [];
    patient_in      := array queue [];
    still_available := list_of_doctors;
    doctor_out      := array queue [];
    still_examining := array queue2 [];
    patient_doctor  := array queue2 []
  while true repeat
    seed            := next_seed(old seed);
    still_well, patient_in :=
       well_persons(seed, old still_well || old patient_out);
    still_sick, patient_doctor, still_available :=
       nurse(old still_sick      || old patient_in,
             old still_available || old doctor_out);
    still_examining, patient_out, doctor_out :=
       examinations(seed, old still_examining || old patient_doctor)
  returns stream of patient_in
          stream of doctor_out
  end for

end function % doctors_office
