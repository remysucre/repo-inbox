define hamming

type OneDim  = array[integer];
type Istream = stream[integer];

% Take as input an integer, n, and a set of primes, A, B, C, ... , and
% return a stream of all integers less than or equal to n in order and
% without duplicates of the form, (A ** i) * (B ** j) * (C ** k) * ...
% The main routine calls powers for each prime. powers manipulates two
% two streams of tokens:   s_stream, the stream of tokens generated by
% the previous call to powers; and b_stream, the stream of tokens gen-
% erated by the present call. By selecting the smaller of the heads of
% b_stream and s_stream, the tokens are output in order.

function powers(n, prime: integer; in_stream: Istream
        returns Istream)

   for initial
       token    := stream_first(in_stream);
       s_stream := stream_rest(in_stream);
       b_stream := stream [token * prime]
   while token < n repeat
       token, s_stream, b_stream := 
         let
             s_token := stream_first(old s_stream);
             b_token := stream_first(old b_stream)  
         in
             if stream_empty(old s_stream) then
                b_token,
                old s_stream,
                stream_append(stream_rest(old b_stream), b_token * prime)
             elseif b_token < s_token then
                b_token,
                old s_stream,
                stream_append(stream_rest(old b_stream), b_token * prime)
             else
                s_token,
                stream_rest(old s_stream),
                stream_append(old b_stream, s_token * prime)
             end if
         end let
   returns stream of token when token <= n
   end for

end function % powers

function hamming (n: integer; primes: OneDim
          returns Istream)

   for initial
       i        := 0;
       s_stream := stream [1]
   while i < array_size(primes) repeat
       i        := old i + 1;
       s_stream := powers(n, primes[i], old s_stream)
   returns value of s_stream
   end for

end function % hamming
