Define skyline

% These routines solve a set of linear equations assuming the matrix A
% has a skyline profile. None of the zero elements of A are stored and
% no computations are done for those elements. We first eliminate the
% upper triangle of A by Gaussian elimination without pivoting, and then
% backsolve for x. Including pivoting does not complicate the algorithm
% greatly; however, it will require additional copying.

type OneDim = array[real];
type TwoDim = array[OneDim];
type IntDim = array[integer];

% Take as input an integer, two profile vectors and an n x n matrix of
% real numbers, and return the nonzero elements of the lower and upper
% triangles of A in two "two-dimensional arrays". Note the upper triangle
% is reflected about the diagonal so that its columns are the rows of the
% returned matrix.

function form_skyline(n: integer; row, column: IntDim; A: TwoDim
              returns TwoDim, TwoDim)

  for i in 1, n cross j in row[i], i
  returns array of A[i, j]
  end for,

  for i in 1, n cross j in column[i], i
  returns array of A[j, i]
  end for

end function % form_skyline

% Reduce the lower and upper triangular matrices, and the rhs by the ith
% pivot row. Since L and U are compressed, elements may be missing. 

function reduce(i: integer; L1, U1: TwoDim; b1: OneDim
        returns TwoDim, TwoDim, OneDim)

  % reduce L1
  for j in 1, i - 1 returns array of
    if is error(U1[i, j]) then
       L1[j]
    else
       for k in min(array_liml(L1[i]), array_liml(L1[j])), j
       returns array of
         if is error(L1[i, k]) then
            L1[j, k]
         elseif is error(L1[j, k]) then
            - (L1[i, k] * U1[i, j]) / L1[i, i]
         else
            L1[j, k] - (L1[i, k] * U1[i, j]) / L1[i, i]
         end if
       end for
    end if
  end for,

  % reduce U1
  for j in 1, i - 1 returns array of
    if is error(L1[i, j]) then
       U1[j]
    else
       for k in min(array_liml(U1[i]), array_liml(U1[j])), j
       returns array of
         if is error(U1[i, k]) then
            U1[j, k]
         elseif is error(U1[j, k]) then
            - (L1[i, j] * U1[i, k]) / L1[i, i]
         else
            U1[j, k] - (L1[i, j] * U1[i, k]) / L1[i, i]
         end if
       end for
    end if
  end for,

  % reduce b1
  for j in 1, i - 1 returns array of
    if is error(U1[i, j]) then
       b1[j]
    else
       b1[j] - (b1[i] * U1[i, j]) / L1[i, i]
    end if
  end for

end function % reduce

function eliminate(n: integer; L, U: TwoDim; b: OneDim
           returns TwoDim, OneDim)

  for initial
      i          := n;
      pivot_b    := b[n];
      pivot_A    := L[n];
      L1, U1, b1 := reduce(n, L, U, b)
  while i > 1 repeat
      i          := old i - 1;
      pivot_b    := old b1[i];
      pivot_A    := old L1[i];
      L1, U1, b1 := reduce(i, old L1, old U1, old b1)
  returns array of pivot_A
          array of pivot_b
  end for

end function % eliminate

function backsolve(n: integer; A_prime: TwoDim; b_prime: OneDim
           returns OneDim)

  for initial
      i := n;
      j := 1;
      A := A_prime;
      b := b_prime;
      x := b[n] / A[n, 1]
  while i > 1 repeat
      i := old i - 1;
      j := old j + 1;
      b := for k in 1, i
             b_k := if is error(A_prime[k, old j]) then
                       old b[k]
                    else
                       old b[k] - old x * A_prime[k, old j]
                    end if
           returns array of b_k
           end for;
      x := b[i] / A[i, j]
  returns array of x
  end for

end function % backsolve

function skyline(n: integer; row, column: IntDim;
                 A: TwoDim;  b: OneDim
         returns OneDim)

  let
      L, U := form_skyline(n, row, column, A);
      A_prime, b_prime := eliminate(n, L, U, b)
  in
      backsolve(n, A_prime, b_prime)
  end let
 
end function % skyline
